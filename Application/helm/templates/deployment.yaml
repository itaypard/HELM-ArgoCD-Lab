apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.ReplicaNumber }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      volumes:
        - name: index-html
          configMap:
            name: '{{ .Chart.Name }}-html'  # ConfigMap name is dynamic based on the chart name
            defaultMode: 420  # Permission mode for the volume (chmod 644)
      containers:
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: {{ .Chart.Name }}
          ports:
            - containerPort: {{ .Values.containers.containerPort }}
              protocol: TCP
          imagePullPolicy: Always
          terminationMessagePolicy: File
          image: {{ .Values.containers.image }}:{{ .Values.containers.tag }}
          volumeMounts:
            - name: index-html
              mountPath: /tmp/html  # Path where the file will be mounted inside the container
          
          # Readiness Probe
          readinessProbe:
            httpGet:
              path: /health/readiness  # Path to check readiness
              port: {{ .Values.containers.containerPort }}  # Port the app is listening to
              scheme: HTTP
            initialDelaySeconds: 1  # Delay before the first probe
            timeoutSeconds: 1  # Timeout for each probe
            periodSeconds: 10  # Interval between probes
            successThreshold: 1  # Count to declare success
            failureThreshold: 3  # Count to declare failure

          # Liveness Probe
          livenessProbe:
            httpGet:
              path: /health/liveliness  # Path to check liveness
              port: {{ .Values.containers.containerPort }}  # Port the app is listening to
              scheme: HTTP
            initialDelaySeconds: 1  # Delay before the first probe
            timeoutSeconds: 1  # Timeout for each probe
            periodSeconds: 10  # Interval between probes
            successThreshold: 1  # Count to declare success
            failureThreshold: 3  # Count to declare failure

          # Set environment variable for the application port
          env:
            - name: PORT
              value: {{ .Values.containers.containerPort | quote }}  # Dynamically set PORT to containerPort from values.yaml

      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
